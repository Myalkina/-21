from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from django_apscheduler.jobstores import DjangoJobStore
from django_apscheduler.models import DjangoJobExecution
from django_apscheduler import util
from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils import timezone
from datetime import timedelta
from .models import Subscription, Post


def send_weekly_digest():
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    """
    print("=== –ó–ê–ü–£–°–ö –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ô –†–ê–°–°–´–õ–ö–ò ===")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = timezone.now() - timedelta(days=7)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptions = Subscription.objects.select_related('user', 'category').all()

    sent_count = 0
    error_count = 0

    for subscription in subscriptions:
        user = subscription.user
        category = subscription.category

        if not user.email:
            print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ—Ç email, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        new_posts = Post.objects.filter(
            postCategory=category,
            dateCreation__gte=week_ago
        ).select_related('author').order_by('-dateCreation')

        if not new_posts.exists():
            print(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}")
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º email
        subject = f'üì∞ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category.name}"'

        html_message = render_to_string('account/email/weekly_digest.html', {
            'user': user,
            'category': category,
            'posts': new_posts,
            'site_url': settings.SITE_URL,
            'week_ago': week_ago,
        })

        text_message = f'''–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category.name}"

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {new_posts.count()} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π:

'''

        for post in new_posts:
            text_message += f"‚Ä¢ {post.title} ({post.dateCreation.strftime('%d.%m.%Y')})\n"
            text_message += f"  {settings.SITE_URL}/news/{post.id}/\n\n"

        text_message += f'''
---
–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: 
{settings.SITE_URL}/news/unsubscribe/{category.id}/
'''

        try:
            send_mail(
                subject=subject,
                message=text_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=html_message,
                fail_silently=False,
            )
            sent_count += 1
            print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.email} - {new_posts.count()} —Å—Ç–∞—Ç–µ–π")

        except Exception as e:
            error_count += 1
            print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user.email}: {e}")

    print(f"=== –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
    print(f"–û—à–∏–±–æ–∫: {error_count}")


@util.close_old_connections
def delete_old_job_executions(max_age=604_800):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    """
    DjangoJobExecution.objects.delete_old_job_executions(max_age)


def start_scheduler():
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    """
    scheduler = BackgroundScheduler()
    scheduler.add_jobstore(DjangoJobStore(), "default")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 09:00)
    scheduler.add_job(
        send_weekly_digest,
        trigger=CronTrigger(day_of_week="sun", hour=9, minute=0),
        id="weekly_digest",
        max_instances=1,
        replace_existing=True,
    )
    print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 09:00")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)
    scheduler.add_job(
        delete_old_job_executions,
        trigger=CronTrigger(hour=0, minute=0),
        id="delete_old_job_executions",
        max_instances=1,
        replace_existing=True,
    )
    print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 00:00")

    try:
        print("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        scheduler.start()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        scheduler.shutdown()